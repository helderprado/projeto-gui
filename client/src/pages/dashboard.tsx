import { Logout } from "../components/dashboard/menu/buttons/logout";
import { Perfil } from "../components/dashboard/menu/perfil";
import { Balance } from "../components/dashboard/balance";
import { SendMoney } from "../components/dashboard/send-money";
import { History } from "../components/dashboard/history";
import { Transactions } from "../components/dashboard/transactions";
import Head from "next/head";
import { useQuery } from "@tanstack/react-query";
import { getUser, getUsers } from "../services/user";
import { Spinner } from "@chakra-ui/react";
import { getUserTransactions } from "../services/transactions";
import cookies from "next-cookies";
import redirect from "../services/redirect";

type IUser = {
  id: string;
  username: string;
  account: {
    id: string;
    balance: number;
  };
};

export default function Dashboard({ user }: { user: IUser }) {
  const userQuery = useQuery({
    queryKey: ["user"],
    queryFn: () => getUser(user.id),
  });

  const usersQuery = useQuery({ queryKey: ["users"], queryFn: getUsers });

  const transactionsQuery = useQuery({
    queryKey: ["transactions"],
    queryFn: () => getUserTransactions(user.account.id),
  });

  if (
    userQuery.isLoading ||
    usersQuery.isLoading ||
    transactionsQuery.isLoading
  ) {
    return <Spinner size={"sm"} colorScheme={"purple"} />;
  }

  return (
    <div>
      <Head>
        <title>NG - Trybe</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col sm:flex-row lg:flex-row">
        <div className="sm:w-1/6 lg:w-1/6 sm:h-screen lg:h-screen bg-ng-purple p-4 flex flex-col justify-between sm:fixed lg:fixed">
          <Perfil me={userQuery.data} />
          <Logout />
        </div>
        <div className="hidden sm:block lg:block sm:w-1/6 lg:w-1/6"></div>
        <div className="sm:w-5/6 lg:w-5/6 flex flex-col gap-2 p-2">
          <div className="flex flex-col">
            <Balance balance={userQuery.data.account.balance} />
            <History
              transactions={transactionsQuery.data.transactions}
              myAccountId={userQuery.data.account.id}
            />
          </div>
          {usersQuery.data && (
            <SendMoney
              users={usersQuery.data.users.filter(
                (item) => item.id !== user.id
              )}
              myAccount={userQuery.data.account.id}
            />
          )}
          {transactionsQuery.data && (
            <Transactions
              users={usersQuery.data.users}
              transactions={transactionsQuery.data.transactions}
              myAccount={userQuery.data.account.id}
            />
          )}
        </div>
      </div>
    </div>
  );
}

Dashboard.getInitialProps = async (context) => {
  const userId = cookies(context).user;
  const token = cookies(context).token;

  if (!userId || !token) {
    redirect(context, "/login");
  }

  const user = await getUser(userId);

  return { user: user, page: "Login" };
};
